#import os
#print(os.path.abspath("call_convolution"))

# from DAWP
#
# Call Option Pricing with Circular Convolution (Simple)
# C:\Users\User1\PythonQuants\call_convolution
#
# (c) Dr. Yves J. Hilpisch
# Derivatives Analytics with Python
#

import math
import numpy as np
from convolution import revnp, convolution

# Parameter Definitions
M = 4  # number of time steps
dt = 1.0 / M  # length of time interval
r = 0.05  # constant short rate
C = [49.18246976, 22.14027582, 0, 0, 0]  # call payoff at maturity
q = 0.537808372  # martingale probability
qv = np.array([q, 1 - q, 0, 0, 0])  # probabilitiy vector filled with zeros

# Calculation
V = np.zeros((M + 1, M + 1), dtype=np.float)
V[M] = C

for t in range(M - 1, -1, -1):
    V[t] = convolution(V[t + 1], revnp(qv)) * math.exp(-r * dt)

print("Value of the Call Option %8.3f" % V[0, 0])
# (c) Dr. Yves J. Hilpisch
# Derivatives Analytics with Python

import numpy as np

# Function Definitions


def revpy(a):
    ''' Reversing the order of the vector's numbers (for loop). '''
    a = np.array(a)
    n = len(a)
    c = np.zeros(n, dtype=np.float)
    c[0] = a[0]
    for j in range(1, n):
        c[j] = a[n - j]
    return c


def revnp(a):
    ''' Reversing the order of the vector's numbers (NumPy version). '''
    b = a.copy()
    b[1:] = b[1:][::-1]
    return b


def convolution(a, b):
    ''' Convolution of two vectors. '''
    if len(a) != len(b):
        raise ValueError("Lengths of vectors do not match.")
    n = len(a)
    c = np.zeros(n, dtype=np.float)
    for j in range(n):
        s = 0
        for k in range(n):
            if j - k >= 0:
                s += a[j - k] * b[k]
            else:
                s += a[j - k + n] * b[k]
        c[j] = s
    return c
